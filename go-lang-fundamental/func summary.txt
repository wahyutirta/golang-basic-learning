Basic syntax
- func foo() {
    ...
}
Parameter
- coma delimited list of variables and types
    -- func foo(bar string, baz int)
- parameters of same type list type once
    -- func foo(bar, baz string)
- when pointer are passed in, the function can change the value in the caller
    -- this is always true for data slices and maps
- Use variadic parameters to send list of same type in
    -- Must be last parameter
    -- Received as a slice
    -- func foo (bar string, baz ...int)

Return values
- Single return values just list type
    -- func foo() int
- Multiple return value list types surrounded by parentheses
    -- func foo() (int, error)
    -- The (result type, error) paradigm is a very common idiom
- Can use named return values
    -- initializes returned variables
    -- Return using return keyword on its own
- Can return addresses of local variables
    -- automatically promoted from locak memory (stack) to shared memory (heap)

anonymous function
- a function dont have names if they are:
    -- immediately invoked
    -> func() {
        // write code here
    }()
    -- assigned to a variable or passed as an argument to a function
    -> a := func() {
        // write code here
    }
    a ()

functions as types
- Can assign functions to variables or use as arguments and return values in function
- Type signature is like function signature, with no parameter names
    -- var f func(string, string, int) (int, error)

methods
- Functions that executes in context of a type
- format 
    -- func (g greeter) greet(){
    ...
    }
- Receiver can be value or pointer
    -- Value receiver gets copy of type
    -- Pointer receiver gets pointer of type
